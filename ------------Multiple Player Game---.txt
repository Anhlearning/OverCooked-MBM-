------------Multiple Player Game-------------------

-Netcode For game objects
Host 
Server 
Client
Class NetworkBehavior - IsOwner 
NetworkBehaviour và isOwner
**NetworkBehaviour: Là một lớp cơ sở mà bạn có thể kế thừa để tạo ra các script hoạt động trong môi trường mạng. Nó cung cấp nhiều tính năng và công cụ để đồng bộ hóa các hành vi và trạng thái của đối tượng giữa máy chủ và các client.

**isOwner: Là một thuộc tính của NetworkBehaviour. Nó trả về một giá trị kiểu bool, cho biết liệu đối tượng mà script này gắn vào có thuộc quyền sở hữu của client hiện tại hay không.

2. Cách isOwner Hoạt Động
Trong một ứng dụng mạng, mỗi đối tượng có thể được sở hữu bởi một máy khách cụ thể. Chỉ có chủ sở hữu (owner) của đối tượng đó mới có quyền điều khiển đối tượng. Ví dụ, trong một trò chơi nhiều người chơi, mỗi người chơi sẽ sở hữu và điều khiển nhân vật của mình.

Cụ thể hơn:
Nếu isOwner trả về true, điều đó có nghĩa là client hiện tại (client đang chạy script này) là chủ sở hữu của đối tượng mà script này gắn vào.
Nếu isOwner trả về false, nghĩa là client hiện tại không phải là chủ sở hữu, và có thể một client khác hoặc máy chủ đang kiểm soát đối tượng này.

Implement: 
1.setup Multipler Player
-Install nets code
-create Networkmanager and add component in player (networkobject and networkmonobehaivor)
-fix error no instance of player 
-tạo UI để test ting netcode host,ser,client
2.Sync Movement 
-fix movement both client and host
-add component networktransform
-Author mode và owner Mode
3.Sync Animator
-add component Animator Authorivate Owner() 
4.Sync Delivery Manager
-Sync = Client RPC -> từ client gọi lên server để cập nhật bằng hàm RecipeClient 
Note: RPC không đồng bộ hóa được các dữ liệu khác ngoài value Type. Có nghĩa là khi truyền tham số vào hàm có RPC thì tham số phải là kiểu value type
-Sync DeliveryCorrect = Server RPC + Client RPC
5.Fix Selected CounterVisual 
-Use Method OnSpawnNetWork
-Use static event (OnAnyPlayerSpawned) to check when player Spawn
-Remove Static event khi load scene
6.Player Pickup sync
-Create Class(Singelton) and object KitchenGameMultiplayer : NEtworkBehavior (task SpawnKitchenObject)
-Method : spawnKitchenObject,spawnKitchenObjectServerRpc ,GetkitchenObjectIdx,GetKitchenObjectSOfromIdx
-Note: comment set object parent 
-Create scriptableObject KitchenObjectList
- trans IkitchenObject -> networkobject reference 
7.Sync SetobjectParent 
error khi setparent : Invalid parenting , networkobject moved under a non-Networkobject Parent 
fix : create class followTransform component of kitchenobject 
-create method setkitchenobjectparentServerRpc and ClientRpc 
-fix animation visual of containerCounter 
8.Sync TrashCounter 
-Fix destroySelf -> Because object destruction is only done on the server, RPC server synchronization is required.
- Create method static DestroyKitchenObject{KitchenGameMultiplayer.Destroykitchenobject()} Of kitchenObject Class
-Create method DestroyKitchenObject of KitchenGamemultiplayer (serverRpc) 
-Sync ClearObjectParent -> broadCast client (Client Rpc)
9.Sync CuttingCounter
-Sync Progress 
-Sync kitchenObject
Note: Variables referenced on clients during clientRpc broadcasts must be synchronized with each other.
10.Sync StoveCounter
-Use network Variable and Delegate OnValueChange 
-fyringTimer,BruningTimer,state -> Network Variable 
11.Sync State Game 
-Use ServerPara 
12.Sync Flow 
13.Character Selected 
--Create object CharacterSelected UI 
	+ MainMenu Button
	+ Ready	Button
--Edit Scene
-Create Script CharacterSelectedPlayer 
-Create Data Type PlayerData:Iequatable<PlayData>,InetworkSerializeble ( ulong clientId)
-Crete networkList<PlayerData> in KitchenGameMultiplayer
14.Setup-Lobby
-Install package Lobby 
-Setup ProjectSetting
